Imports Infragistics.Win
Imports Infragistics.Win.UltraWinGrid

Public Class HeaderCheckBoxCreationFilter
    Implements IUIElementCreationFilter

#Region " Data"

    '
    ' This event will fire when the CheckBox is clicked. 
    '
    Event CheckChanged As HeaderCheckBoxClickedHandler


    Delegate Sub HeaderCheckBoxClickedHandler(ByVal sender As Object, ByVal e As HeaderCheckBoxEventArgs)

    '
    ' Stores the CheckState for each boolean column in the WinGrid associated with this filter.
    ' Note, if one instance of this filter is used with multiple grids at the same time,
    ' be sure that the column keys of boolean columns in the grids are not identical.
    '
  Protected hashCheckStates As New Hashtable()
  Private _CheckState As CheckState
  Dim checkBoxUIElem As CheckBoxUIElement = Nothing

  ' Data
  'Public WriteOnly Property MatCheckState() As CheckState
  '  Set(ByVal value As CheckState)
  '    If checkBoxUIElem IsNot Nothing Then
  '      checkBoxUIElem.CheckState = value
  '      _CheckState = value
  '      If Not Me.hashCheckStates.Contains("New SkalGiveMaterialeGodtgørelse") Then
  '        Me.hashCheckStates.Add("New SkalGiveMaterialeGodtgørelse", value)
  '      Else
  '        Me.hashCheckStates("New SkalGiveMaterialeGodtgørelse") = value
  '      End If
  '      checkBoxUIElem.Invalidate(True)
  '    End If
  '  End Set
  'End Property
#End Region

#Region " HeaderCheckBoxEventArgs"

    ' Event argument class used for the CheckChanged event. 
    Public Class HeaderCheckBoxEventArgs
        Inherits EventArgs

        ' Data
        Private col As UltraGridColumn
        Private chkState As CheckState

        ' Constructor
        Public Sub New(ByVal column As UltraGridColumn, ByVal checkState As CheckState)
            Me.col = column
            Me.chkState = checkState
        End Sub

        '
        ' The UltraGridColumn whose header contains the CheckBoxUIElement that was clicked.
        '
        Public ReadOnly Property Column() As UltraGridColumn
            Get
                Return Me.col
            End Get
        End Property

        ' 
        ' The new CheckState of the CheckBoxUIElement that was clicked.
        '
        Public ReadOnly Property CurrentCheckState() As CheckState
            Get
                Return Me.chkState
            End Get
        End Property
    End Class
    ' HeaderCheckBoxEventArgs
#End Region

#Region " OnCheckBoxUIElementElementClick"
    '
    ' This method is invoked when the user clicks on a check box in a column header.
    '
    Private Sub OnCheckBoxUIElementElementClick(ByVal sender As Object, ByVal e As Infragistics.Win.UIElementEventArgs)

        ' Get the CheckBoxUIElement that was clicked
        Dim checkBoxUIElement As CheckBoxUIElement = CType(e.Element, CheckBoxUIElement)

        ' Get the ColumnHeader associated with this particular element
        Dim headerUIElement As HeaderUIElement = CType(checkBoxUIElement.GetAncestor(GetType(HeaderUIElement)), HeaderUIElement)

        Dim columnHeader As Infragistics.Win.UltraWinGrid.ColumnHeader = CType(headerUIElement.GetContext(GetType(Infragistics.Win.UltraWinGrid.ColumnHeader)), Infragistics.Win.UltraWinGrid.ColumnHeader)

        ' Store the CheckState of this column header.
        Me.hashCheckStates(columnHeader.Column.Key) = checkBoxUIElement.CheckState

        ' Raise the CheckChanged event so that the listener(s) know that the CheckState changed.
        RaiseEvent CheckChanged(Me, New HeaderCheckBoxEventArgs(columnHeader.Column, checkBoxUIElement.CheckState))

    End Sub
    ' OnCheckBoxUIElementElementClick
#End Region

#Region " IUIElementCreationFilter Implementation"

#Region " BeforeCreateChildElements"

    Public Function BeforeCreateChildElements(ByVal parent As Infragistics.Win.UIElement) As Boolean Implements IUIElementCreationFilter.BeforeCreateChildElements
        ' We do not want to do anything before the child elements of 
        ' the column header are created, so just return false.
        Return False
    End Function
    ' BeforeCreateChildElements
#End Region

#Region " AfterCreateChildElements"

    Public Sub AfterCreateChildElements(ByVal parent As Infragistics.Win.UIElement) Implements IUIElementCreationFilter.AfterCreateChildElements
        ' Check if the element that was just created is a HeaderUIElement.
        ' We are going to put each CheckBoxUIElement on a HeaderUIElement.
        If TypeOf parent Is HeaderUIElement Then
            ' Get the HeaderBase object from the HeaderUIElement
            Dim header As HeaderBase = CType(parent, HeaderUIElement).Header

            ' Only put the checkbox into headers whose DataType is Boolean
            If header.Column.DataType Is GetType(Boolean) Then

                ' Create some variables to use throughout the method
                Dim uiElem As UIElement = Nothing
        'Dim checkBoxUIElem As CheckBoxUIElement = Nothing
                Dim colHeader As Infragistics.Win.UltraWinGrid.ColumnHeader = Nothing
                Dim colKey As String = String.Empty
                Dim currentState As CheckState
                Dim txtUIElement As TextUIElement = Nothing

                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                ' Try to reuse a CheckBoxUIElement
                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                '
                ' Since the grid sometimes re-uses UIElements, we need to check to make sure 
                ' the header does not already have a CheckBoxUIElement attached to it.
                ' If it does, we just get a reference to the existing CheckBoxUIElement,
                ' and reset its properties.
                uiElem = parent.GetDescendant(GetType(CheckBoxUIElement))
                If uiElem Is Nothing Then
                    checkBoxUIElem = New CheckBoxUIElement(parent)
                Else
                    checkBoxUIElem = CType(uiElem, CheckBoxUIElement)
                End If

                ' Use XP themes, if available.
                If checkBoxUIElem.Appearance Is Nothing Then
                    checkBoxUIElem.Appearance = New Infragistics.Win.Appearance()
                End If
                checkBoxUIElem.Appearance.ThemedElementAlpha = Alpha.Opaque

                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                ' Get a reference to the ColumnHeader
                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                '
                ' Get the ColumnHeader that this CheckBoxUIElement is on.
                colHeader = CType(checkBoxUIElem.GetAncestor(GetType(HeaderUIElement)).GetContext(GetType(Infragistics.Win.UltraWinGrid.ColumnHeader)), Infragistics.Win.UltraWinGrid.ColumnHeader)

                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                ' Get the CheckState for the CheckBoxUIElement
                ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                '
                ' Check if we have already stored the value of this column's associated CheckState.
                ' If we have not, then add this column to the Hashtable and give it an 'Indeterminate' value.
                ' Otherwise, just get the column's CheckState from the HashTable.
                ' We need to store the CheckState values because the CheckBoxUIElements are destroyed and
                ' recreated often, so they do not maintain the CheckState value automatically.
                colKey = colHeader.Column.Key
        If colKey = "New SkalGiveMaterialeGodtgørelse" Or colKey = "Valgt" Then
          currentState = _CheckState
        Else
          currentState = CheckState.Unchecked
        End If
        If Not Me.hashCheckStates.Contains(colKey) Then
          Me.hashCheckStates.Add(colKey, currentState)
        Else
          currentState = CType(Me.hashCheckStates(colKey), CheckState)
        End If
        checkBoxUIElem.CheckState = currentState

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        ' Attach a handler for the ElementClick event
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        AddHandler checkBoxUIElem.ElementClick, New UIElementEventHandler(AddressOf Me.OnCheckBoxUIElementElementClick)

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        ' Add the CheckBoxUIElement to the Header's child elements collection
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        parent.ChildElements.Add(checkBoxUIElem)

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        ' Adjust the location and size of the CheckBoxUIElement and it's neighboring element
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        ' Position the CheckBoxUIElement. The number 3 here is used for 3
        ' pixels of padding between the CheckBox and the edge of the Header.
        ' The CheckBox is shifted down slightly so it is centered in the header.
        checkBoxUIElem.Rect = New Rectangle( _
                    parent.Rect.X + 3, _
                    parent.Rect.Y + ((parent.Rect.Height - checkBoxUIElem.CheckSize.Height) / 2), _
                    checkBoxUIElem.CheckSize.Width, _
                    checkBoxUIElem.CheckSize.Height())

        ' Get the TextUIElement - this is where the text for the 
        ' Header is displayed. We need this so we can push it to the right
        ' in order to make room for the CheckBox
        uiElem = parent.GetDescendant(GetType(TextUIElement))
        If Not uiElem Is Nothing AndAlso TypeOf uiElem Is TextUIElement Then
          ' Push the TextUIElement to the right a little to make 
          ' room for the CheckBox. 3 pixels of padding are used again. 
          txtUIElement = CType(uiElem, TextUIElement)
          txtUIElement.Rect = New Rectangle( _
           checkBoxUIElem.Rect.Right + 3, _
           txtUIElement.Rect.Y, _
           parent.Rect.Width - (checkBoxUIElem.Rect.Right - parent.Rect.X), _
           txtUIElement.Rect.Height)
        Else
          Exit Sub
        End If

      Else ' The Column's DataType Is NOT Boolean

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        ' Dispose of any old CheckBoxUIElements
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        ' If the column is not a boolean column, we do not want to have a checkbox in it
        ' Since UIElements can be reused by the grid, there is a chance that one of the
        ' HeaderUIElements that we added a checkbox to for a boolean column header
        ' will be reused in a column that is not boolean.  In this case, we must remove
        ' the checkbox so that it will not appear in an inappropriate column header.
        Dim uiElem As UIElement = parent.GetDescendant(GetType(CheckBoxUIElement))
        If Not uiElem Is Nothing AndAlso TypeOf uiElem Is CheckBoxUIElement Then
          parent.ChildElements.Remove(uiElem)
          uiElem.Dispose()
        End If
      End If
    End If
    End Sub
    ' AfterCreateChildElements
#End Region

    ' IUIElementCreationFilter Implementation
#End Region

End Class